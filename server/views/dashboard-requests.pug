extends layout

block content
  .dashboard
    .user
      .block.profile
        .photo
        p Performer since #{moment(pilot.created).format('MMM YYYY')}
        h1 #{pilot.displayName()}
        h2
          a(href='/pilots/stripe/dashboard?account=true') View Stripe account
      .block.performance
        h1 Demo Performance
    



    section.rides.additional-padding
      if currentSong 
        h4 Current Song
        .list
          .row
            .cell.name= currentSong.passenger.displayName()
            .cell.date= moment(new Date(Date.parse(currentSong.created))).format('h:mm a')
            .cell.songInfoDiv
              .songInfoTitle=currentSong.songInfo.title
              .songInfoArtist=currentSong.songInfo.artist
            .cell.price $#{(currentSong.amountForPilot() / 100).toFixed(2)}
         
      //- .block.week
      //-   p This week
      //-   h1 $#{(ridesTotalAmount / 100).toFixed(2)}
      //-   h2 #{rides.length} performances
      //- .block.available
      //-   p Your balance
      //-   h1 $#{((balanceAvailable + balancePending) / 100).toFixed(2)}
      //-   h2 $#{(balanceAvailable / 100).toFixed(2)} available
      //- .block.stripe
      //-   form.payout(action='/pilots/stripe/payout', method='POST', autocomplete='off')
      //-     input(class='primary' type='submit', value='Pay out now' disabled=(balanceAvailable===0))
      //-   p
      //-     a(href='/pilots/stripe/dashboard') View payouts on Stripe
    section.rides
      h4 Requested Songs
      if songs.length == 0
        .no-rides
          .rocket
          h1 No Songs to display yet
          h2 Rock out rockstar!
      else
        .list
          each song in songs
            .row
              .cell.name= song.passenger.displayName()
              .cell.date= moment(new Date(Date.parse(song.created))).format('h:mm a')
              .cell.songInfoDiv
                .songInfoTitle=song.songInfo.title
                .songInfoArtist=song.songInfo.artist
              .cell.price $#{(song.amountForPilot() / 100).toFixed(2)}
              form(action='/pilots/auth-capture', method='POST', autocomplete='off', class="accept-request")
                input(type='text', name="songid", hidden=true, value=song._id)
                button(type='submit', name="accept-the-request", class="accept-request") Accept request

block footer
  .annotation.card.dashboard-banner(class=(showBanner ? '' : 'hidden'))
    h4 The Connect Express onboarding flow is now complete. 
      a.show-more(href="#") &nbsp;(show more)
    .description
      p Express includes the #[strong Stripe account ID] that was just created, so after the flow redirects to My Request we can save it to the database.
      p This account ID can then be used to #[a(href="https://stripe.com/docs/api/balance/balance_retrieve" target="_blank") retrieve the performersâ€™s balance], provide a #[a(href="https://stripe.com/docs/connect/destination-charges" target="_blank") destination for payments], or #[a(href="https://stripe.com/docs/connect/payouts#instant-payouts" target="_blank") create Instant Payouts].
    form.right
      button.primary-action.next Next step
  .annotation.card.dashboard-simulate(class=(showBanner ? 'hidden' : ''))
    h4 Simulate a performance to create a payment for this performer.
      a.show-more(href="#") &nbsp;(show more)
    .description
      ol
        li The balance is automatically fetched from the Stripe API.
        li #[strong View payouts on Stripe] lets performers see their payouts or edit their account information.
        li #[strong Pay out now] uses the Stripe API to #[a(href="https://stripe.com/docs/connect/payouts#instant-payouts" target="_blank") generate a payout] of the available balance. #[a(href="https://stripe.com/docs/connect/payouts#instant-payouts" target="_blank") Instant Payouts] are available with a debit card.
    form.right(action='/pilots/auth-request', method='POST', autocomplete='off')
      input(type='submit', name="immediate_balance", value='request song', class='primary-action')